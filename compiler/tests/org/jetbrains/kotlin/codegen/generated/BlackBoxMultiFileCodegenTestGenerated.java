/*
 * Copyright 2010-2016 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.codegen.generated;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@RunWith(JUnit3RunnerWithInners.class)
public class BlackBoxMultiFileCodegenTestGenerated extends AbstractBlackBoxCodegenTest {
    @TestMetadata("compiler/testData/codegen/boxMultiFile")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class BoxMultiFile extends AbstractBlackBoxCodegenTest {
        @TestMetadata("accessorForProtected.kt")
        public void testAccessorForProtected() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultiFile/accessorForProtected.kt");
            doTest(fileName);
        }

        @TestMetadata("accessorForProtectedInvokeVirtual.kt")
        public void testAccessorForProtectedInvokeVirtual() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultiFile/accessorForProtectedInvokeVirtual.kt");
            doTest(fileName);
        }

        public void testAllFilesPresentInBoxMultiFile() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxMultiFile"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("callMultifileClassMemberFromOtherPackage.kt")
        public void testCallMultifileClassMemberFromOtherPackage() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultiFile/callMultifileClassMemberFromOtherPackage.kt");
            doTest(fileName);
        }

        @TestMetadata("inlineMultifileClassMemberFromOtherPackage.kt")
        public void testInlineMultifileClassMemberFromOtherPackage() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultiFile/inlineMultifileClassMemberFromOtherPackage.kt");
            doTest(fileName);
        }

        @TestMetadata("internalVisibility.kt")
        public void testInternalVisibility() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultiFile/internalVisibility.kt");
            doTest(fileName);
        }

        @TestMetadata("kt10047.kt")
        public void testKt10047() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultiFile/kt10047.kt");
            doTest(fileName);
        }

        @TestMetadata("kt1515.kt")
        public void testKt1515() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultiFile/kt1515.kt");
            doTest(fileName);
        }

        @TestMetadata("kt1528.kt")
        public void testKt1528() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultiFile/kt1528.kt");
            doTest(fileName);
        }

        @TestMetadata("kt1845.kt")
        public void testKt1845() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultiFile/kt1845.kt");
            doTest(fileName);
        }

        @TestMetadata("kt2060.kt")
        public void testKt2060() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultiFile/kt2060.kt");
            doTest(fileName);
        }

        @TestMetadata("kt5445.kt")
        public void testKt5445() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultiFile/kt5445.kt");
            doTest(fileName);
        }

        @TestMetadata("kt5445_2.kt")
        public void testKt5445_2() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultiFile/kt5445_2.kt");
            doTest(fileName);
        }

        @TestMetadata("kt9717.kt")
        public void testKt9717() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultiFile/kt9717.kt");
            doTest(fileName);
        }

        @TestMetadata("kt9717DifferentPackages.kt")
        public void testKt9717DifferentPackages() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultiFile/kt9717DifferentPackages.kt");
            doTest(fileName);
        }

        @TestMetadata("kt9958.kt")
        public void testKt9958() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultiFile/kt9958.kt");
            doTest(fileName);
        }

        @TestMetadata("kt9958Interface.kt")
        public void testKt9958Interface() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultiFile/kt9958Interface.kt");
            doTest(fileName);
        }

        @TestMetadata("mainInFiles.kt")
        public void testMainInFiles() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultiFile/mainInFiles.kt");
            doTest(fileName);
        }

        @TestMetadata("multifileClassPartsInitialization.kt")
        public void testMultifileClassPartsInitialization() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultiFile/multifileClassPartsInitialization.kt");
            doTest(fileName);
        }

        @TestMetadata("packageLocalClassNotImportedWithDefaultImport.kt")
        public void testPackageLocalClassNotImportedWithDefaultImport() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultiFile/packageLocalClassNotImportedWithDefaultImport.kt");
            doTest(fileName);
        }

        @TestMetadata("protectedFromLambda.kt")
        public void testProtectedFromLambda() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultiFile/protectedFromLambda.kt");
            doTest(fileName);
        }

        @TestMetadata("samWrappersDifferentFiles.kt")
        public void testSamWrappersDifferentFiles() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultiFile/samWrappersDifferentFiles.kt");
            doTest(fileName);
        }

        @TestMetadata("sameFileName.kt")
        public void testSameFileName() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultiFile/sameFileName.kt");
            doTest(fileName);
        }

        @TestMetadata("samePartNameDifferentFacades.kt")
        public void testSamePartNameDifferentFacades() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultiFile/samePartNameDifferentFacades.kt");
            doTest(fileName);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultiFile/simple.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("compiler/testData/codegen/boxMultifileClasses")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class BoxMultifileClasses extends AbstractBlackBoxCodegenTest {
        public void testAllFilesPresentInBoxMultifileClasses() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxMultifileClasses"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("compiler/testData/codegen/boxMultifileClasses/calls")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Calls extends AbstractBlackBoxCodegenTest {
            public void testAllFilesPresentInCalls() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxMultifileClasses/calls"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("callFromOtherPackage.kt")
            public void testCallFromOtherPackage() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultifileClasses/calls/callFromOtherPackage.kt");
                doTest(fileName);
            }

            @TestMetadata("constFromOtherPackage.kt")
            public void testConstFromOtherPackage() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultifileClasses/calls/constFromOtherPackage.kt");
                doTest(fileName);
            }

            @TestMetadata("valFromOtherPackage.kt")
            public void testValFromOtherPackage() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultifileClasses/calls/valFromOtherPackage.kt");
                doTest(fileName);
            }

            @TestMetadata("varFromOtherPackage.kt")
            public void testVarFromOtherPackage() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultifileClasses/calls/varFromOtherPackage.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/codegen/boxMultifileClasses/reflection")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Reflection extends AbstractBlackBoxCodegenTest {
            public void testAllFilesPresentInReflection() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/boxMultifileClasses/reflection"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("constPropertyReferenceFromMultifileClass.kt")
            public void testConstPropertyReferenceFromMultifileClass() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/boxMultifileClasses/reflection/constPropertyReferenceFromMultifileClass.kt");
                doTest(fileName);
            }
        }
    }
}
